* I-D's
** I-D its-all-about-linkability

As long as we're sending packets around with the same src IP addr
field being used for a whole lot of different things, these different
things are linkable and if any information at any destination is
linkable to you, you're linked to everything you've done using that
src addr.

The same goes for other [entities] linked to your person, like the
fingerprint of your web browser and [more examples].

[scope?]

- spatial and temporal linkability?
  - temporal, examples
    - src ip; send email using a given ip addr and email addr, later
      use another ip addr but the same email addr;
      person <-> src ip <-> email addr

    - browser fp; browser visiting one site and later another site -- 
  - spatial, examples
    - [todo]

*** [[gnus:nnimap%2Badbc:INBOX#52360EED.6060102@cs.tcd.ie][email w/ stephen]]
> * I-D its-all-about-linkability
> 
> As long as we're sending packets around with the same src IP addr
> field being used for a whole lot of different things, these different
> things are linkable and if any information at any destination is
> linkable to you, you're linked to everything you've done using that
> src addr.

Yup. And as long as you need an answer, you're stuck with that.
(Modulo changing your source address, but with BCP38 networks
doing uRPF, you're limited in what you can do, and your MAC
addr will also give things away to those nearby.)

> 
> The same goes for other [entities] linked to your person, like the
> fingerprint of your web browser and [more examples].

Yup.

I think it'd get tricky to define some good goals here - clearly
most people do not want full unlinkability. One could argue that
most people's activities ought be less linkable though. Hard to
draw a good line there.

> --8<---------------cut here---------------end--------------->8---
> 
> I also have this thing buzzing at the back of my head saying "spatial
> and temporal linkability" but I don't know yet how to explain
> it. Temporal is pretty easy, example:
> 
>     - src ip; send email using a given ip addr and email addr, later
>       use another ip addr but the same email addr;
>       person <-> src ip <-> email addr
> 
> But spatial is probably not the right word for what I'm trying to
> express, but it's about linking your separate devices to your person.

I get what you mean. Maybe its two things: topological and
cross-layer (or cross-application) linkages?

Topological linkage for example would include when TB sends out
packets with the src addr from my home lan when I reboot in work
the next day.

Cross-layer would be when the same MAC is used with different
src IPs, or when the different src IPs are used to access my
very own web server host via SSH.

Cross-application might be different or not, but would include
things like the netflix competition correlation.

> Are these terms that are in use in the IETF? Could they be useful? 

No and yes.

> Is
> this anything that I should try to bring up somehow? 

Sure. I think in the first instance it'd be good to do that in
terms of extending rfc 6973 if you think that makes sense.

> I'm a bit at loss
> and entering this arena at the wrong level seems to be a good way of
> being shot down hard. I wouldn't want that, not because of a hurt ego
> (heh, being stupid is part of the game) but rather to avoid burning my
> name with people who I would like to be able to speak to in Vancouver.

You'll be there? Great. Any idea if other Tor folk will also?

Cheers,
S.

> Thanks for any comments on this. They don't have to be too structured,
> a quick comment from a veteran would be helpful.
> 
*** Linkability
**** [[gnus:nnimap%2Badbc:INBOX#CAKDKvuyi_XLuZGFyicNXXnwJmw8gqUdShaiOu%3DG%2BWqeojY8Dtg@mail.gmail.com][Email from Nick Mathewson: Re: W3C/IAB workshop on Streng]]
I think that it handles authenticator linkability, but it doesn't
think so much about protocol linkability issues.  Consider for example
the gmt_unix_time issue in TLS, or the way in which TLS ciphersuites
can make clients act differently, or the way that web fonts and other
features make clients so distinguishable.

It should also clarify that probabilistic linkability is still
linkability.  For example, even things that aren't unique -- like
clock skew and library versions and window sizes and font sets -- make
user activity linkable. When we say "Transaction A is linked to
transaction B", we don't mean "an adversary concludes with P=1 that A
and B were performed by the same client" but rather "An adversary
concludes that A and be were performed by the same client with P
significantly greater than if A and B were two randomly chosen
transactions."

My most important point to make about linkability is that it makes all
other privacy problems worse.  When a protocol's transactions are
highly linkable, then it's impossible to do some things publicly and
some privately: under such circumstances, no transaction a user makes
can be more anonymous than their least anonymous transaction.

I'm not going to dogmatically insist that all clients must behave
indistinguishably in all protocols.  But we do need to admit that
client linkability is a privacy killer: when we accept too much client
linkability, we need to admit that we're building something that can't
provide privacy; and when we declare that we're building something
compatible with privacy, we need to eliminate all the linkability we
can.

(Please feel free to grab as much of the text above as you like if you
think it would help at all.  please feel free to ask me to talk more
about anything.)
**** email to leif <2014-01-17 Fri>
Hej Leif!

Baserat på lite diskussioner med Nick Mathewson så skulle jag vilja
skriva något om "protocol linkability"

- gmt_unix_time i TLS är aktuellt, fingerprintability av browsers pga
  installerade fonter och fönsterstorlek är konkret

- även probabilistisk länkbarhet är länkbarhet -- även när P<1 kan det
  vara klart länkbart

  When we say "Transaction A is linked to transaction B", we don't
  mean "an adversary concludes with P=1 that A and B were performed by
  the same client" but rather "An adversary concludes that A and B
  were performed by the same client with P significantly greater than
  if A and B were two randomly chosen transactions."

- är länkbarhet privacyns LCD? ingenting en användare gör med ett
  länkbart protokoll kan vara mer anonymt än den minst anonyma
  transaktionen utförd

Skall jag försöka få in det i draft-johansson-linkability-bad eller
skall jag skriva en separat I-D?
**** draft-xxx-protocol-linkability
- protocol design should explain [client linkability of the protocol];
  one way is to give a P for linking one client to another; at one end
  of the spectrum there's a GID transported in clear text, at the
  other a single source of constant data flow identical to all the
  other clients

- client fingerprintability analysis of a handful protocols to
  encourage new protocols to have one

** I-D blocking-on-the-internet
* NOTES
** NSA chairs
- ben laurie on [[https://www.ietf.org/mail-archive/web/perpass/current/msg00322.html][perpass@]]: "The CFRG is chaired by David
  McGrew(mcgrew@cisco.com) and Kevin Igoe (kmigoe@nsa.gov)."
  http://irtf.org/cfrg
** problem statement
- secure hardware
- firmware
- software
- linkability
  - over time
  - with FOO?
- fingerprintability (== linkability?)

** Involving tor ppl
*** TODO to: nick, tor-assistants@

https://down.dsg.cs.tcd.ie/misc/perpass.txt

topic: Let's remove gmt_unix_time from TLS
owner: ??
wg: TLS
thread: https://www.ietf.org/mail-archive/web/perpass/current/msg00168.html
synopsis: reasonable change, no barrier, good for Tor
draft: n/a

** Tools for writing drafts
We want to produce XML2RPC XML (RFC 2629).

https://github.com/cabo/kramdown-rfc2629 can do that and can also be
run _on_ github, see f.ex. FIXME.

Example usage: 
$ kramdown-rfc2629 mydraft.mkd > mydraft.xml
$ xml2rfc mydraft.xml

For having github create XML and HTML for us, wee http://awestruct.org/auto-deploy-to-github-pages/
*** Local installation
apt-get install xml2rfc
gem install kramdown-rfc2629
**** Log
root@tool:~# gem install kramdown-rfc2629
Fetching: kramdown-1.3.1.gem (100%)
Fetching: kramdown-rfc2629-1.0.9.gem (100%)
Successfully installed kramdown-1.3.1
Successfully installed kramdown-rfc2629-1.0.9
2 gems installed
Installing ri documentation for kramdown-1.3.1...
Installing ri documentation for kramdown-rfc2629-1.0.9...
Installing RDoc documentation for kramdown-1.3.1...
Installing RDoc documentation for kramdown-rfc2629-1.0.9...
*** Putting a secret in the Travis control file
sudo apt-get install ruby1.9.1-dev
sudo gem install travis
curl -A 'meh' -x socks4a://localhost:9050/ -u ln5 -d '{"scopes":["public_repo"],"note":"CI: demosite"}' https://api.github.com/authorizations
# grabbing "token"

* Tor
** NOTES
*** talking to nick <2013-11-01 Fri>
**** standardizing onion routing
- fear is that ppl start implementing after RFC and not current
  protocol, which is evolving
- AP: bring seasoned ietf:er and nick together. stephen and nick sunday?
  ap linus: start email thread today
**** tls AP's
Contents have moved to [[*TLS][TLS]].

***** chat log
<ln5> nickm: ok, found the older email (Tue, 10 Sep 2013 09:34:46 +0200). listing things from there:
<ln5> Did we start working on a design for TLS-minus-the-warts yet? Should we
<ln5> bring such a thing to the IETF or would that be creating more trouble
<ln5> than it would solve?
<ln5> and related: Did we enumerate all things problematic with TLS somewhere?                                         
      The protocol, not any particular implementation. 
<nickm> I think we should be involved in TLS1.3
<ln5> nickm: and then some things that were discussed in berlin, with ioerror:                                         
      ""superencrypt" to avoid
<ln5> fingerprinting, an argument for adopting Salsa20 and at least one more
<ln5> thing that I have forgotten"
<nickm> ln5: I think that a revised laundry list would be a fine thing.  There                                         
        are a bunch of items.  Some of them , I've heard that people already                                           
        want to have in TLS 1.3:                                        [17:56]
<ln5> nickm: sounds plausible. i'm not a person with a deep knowledge of tls                                           
      though. i can bring up issues though, and try to argue.
<nickm> For example, encrypt as much of the handshake as possible. Encrypt                                             
        record types. Support the ciphers I like (agl is already pushing for                                           
        this, since he likes them too).                                 [17:57]
<nickm> ln5: more TLS laundry list items: encrypt-then-MAC as an AEAD mode.
<Yawning> agl's latest proposal is poly1305 + chacha right?
<nickm> Yawning: yes, and I believe he also likes curve25519
<nickm> ln5: minimize necessary observable differences between TLS                                                     
        implementations.
<Yawning> why poly over the sha-3 finalists?                            [18:03]
<nickm> faster.
<Yawning> (not neccecarily keacc)
<nickm> polynomial MACs are faster than cryptographic digest-based MACs.                                               
<nickm> They have limitations, which is why you only use them in some                                                  
        environments, but for this one they work fine
<Yawning> all the polynoimal macs have a "god help you if you reuse the iv"                                            
          property right?
<Yawning> (not that it's uncommon or problematic for tls)               [18:05]
<nickm> Right. AFAIK, every system that has an IV has the "you can't reuse it"                                         
        property.                                                       [18:06]
<nickm> ln5: Oh, and of course I want gmt_unix_time to go away.         [18:07]
<nickm> ln5: or at least for it to be marked as problematic and deprecated or                                          
        something                                                       [18:08]
<nickm> Wishlist: encrypt packet boundaries. :)

<nickm> ln5: oh, here's another TLS item.  People should admit it when they                                            
        are adding things that are hard to implement in constant time in pure                                          
        C.  No new ciphers or suites should get added unless the proponent can                                         
        point to constant-time implementations of those things on several                                              
        platforms.                                                      [18:18]

<ln5> nickm: "encrypt packet boundaries"? what is that?
<nickm> err, make that "encrypt TLS record boundaries".  Basically, right now                                          
        in TLS it's clear what the record sizes are.  This makes some content                                          
        fingerprinting attacks a little easier to run.                  [18:21]

<Yawning> (are there any block cipers that aren't a nightmare to implement in                                          
          constant time?)
<nickm> Yawning: Most (All?) of the SHA3 finalists (yes I know you asked for                                           
        block ciphers) were easy to do in constant time IIRC.
<nickm> Yawning: Similarly for many (most? all?) of the stream ciphers in the                                          
        eSTREAM portfolio.                                              [18:23]
<Yawning> there's known ways to take either stream ciphers or hash functions                                           
          and get block ciphers so yeah                                 [18:24]
<Yawning> (there's nothing horrifically broken about BEAR/LION/LIONESS right?                                          
          apart from 'slow')                                            [18:27]
<nickm> BEAR and LION are problematic.  LIONESS isn't.                  [18:29]
** standardizing onion routing
See [[*standardizing%20onion%20routing][standardizing onion routing]] for Nick's view.
*** email thread
**** nick 1
To my mind, one big benefit to one or more Informational RFCs
describing Tor would be the rigor of a better-written set of
documents.  Our current specs, though readable, are far from perfect.
I'd hope that better specifications would make it even easier for
others to analyze, update, and improve our protocols.

People already make compatible implementations of the Tor protocols
from time to time. These compatible implementations tend to become
unmaintained fairly quickly--I don't know why that is, but I wouldn't
suspect that our specs are to blame.

I'm a little torn on the benefits of having others build new projects
based on our current protocols.  Our current protocols are, to be
blunt, more or less the sort of thing you'd expect if some talented
but young developers had designed something in a hurry ten years ago
and kept patching it over the years to improve and refine it.  There
are aspects of the protocols that serve no useful purpose besides
backwards compatibility.

What  other benefits would we hope for or expect?


I'm not personally interested in the idea of moving the institutional
responsibility for developing future versions of the Tor protocols in
the future from the IETF. Naturally, we can't stop people from forking
the Tor protocols -- and we wouldn't want to have such authority if it
existed -- but I think the benevolent-dictatorship model serves us
(for now at least) better than the working-group model would.  If I
understand correctly, this means we ought to aim for an Informational
RFC?


The biggest risk would be that someone in the future attempting to
implement Tor-compatible software would aim for compatibility with Tor
as described in the RFC, rather than Tor as implemented on the Tor
network. What could we do to mitigate this risk?


So, how volatile are the Tor protocols exactly?  We keep them
specified version-to-version, and they change a bit in every release
series.  Looking down the list of protocols, there are roughly no
parts that I would be willing to promise never to change in the
future.  In practice, we generally have found it to be no real burden
to support versions of the protocol up to two or three years old, but
we have found it desirable to break backwards compatibility with
things much older than that from time to time.

[Now, to write that other email.]
**** nick 2, replying to stephen
I think that a phone call would be a fine idea.  Or possibly an online
chat, if you're comfortable with that: I find that I am a little
better at communicating nuance in text than in speech.  (To be clear
though, phone would work too.)

Is the logical thing just for a quick two-person chat to get me to
understand what the options are, or should we try to schedule a
multiperson thing?
** cryptohw use case for DA keys
- https://trac.torproject.org/projects/tor/wiki/doc/TorRelaySecurity
  Key theft from ordinary relays.
- https://trac.torproject.org/projects/tor/ticket/5992
  Replace individual directory authorities with a safe alternative
- https://trac.torproject.org/projects/tor/ticket/5968
  "Improve onion key and TLS management"
  README
- https://trac.torproject.org/projects/tor/ticket/5563  
  "Better support for ephemeral relay identity keys"
  README
** TLS
See [[*talking%20to%20nick][talking to nick <2013-11-01 Fri>]] for background.

Related: [[file:~/Persistent~/usr/share/ietf/in-notes/rfc5246.txt][RFC5246 (TLS 1.2)]], [[file:~/Persistent~/usr/share/ietf/in-notes/rfc5116.txt][RFC5116 (AEAD)]]

Here are the action points.

- encrypt-then-MAC as an AEAD mode
  https://en.wikipedia.org/wiki/Authenticated_encryption
  http://www.daemonology.net/blog/2009-06-24-encrypt-then-mac.html
  http://crypto.stackexchange.com/questions/202/should-we-mac-then-encrypt-or-encrypt-then-mac
  [[file:~/Persistent~/usr/share/ietf/internet-drafts/draft-gutmann-tls-encrypt-then-mac-04.txt::TLS%20Working%20Group%20P.%20Gutmann][draft-gutmann-tls-encrypt-then-mac-04]]
- encrypt as much of the handshake as possible, encrypt record types
- encrypt record boundaries
- minimize necessary observable differences between TLS implementations
- make gmt_unix_time go away (or problematic or deprecated or something)
- [goes in a standard?] No new ciphers or suites should get added
  unless the proponent can point to constant-time implementations of
  those things on several platforms.
- [needs no action] Support the ciphers we like (agl likes them too
  and pushes them already)

*** encrypt-then-MAC (EtM) as an AEAD mode
What is AEAD? It's "authenticated encryption with additional
data". Examples in TLS are CCM and GCM.

[i think that] A message encrypted with AEAD can be verified to have
been encrypted with a given key. That's the authentication.

How does it relate to encrypt-then-MAC?
A: AEAD could do EtM.

https://en.wikipedia.org/wiki/Authenticated_encryption:
  Six different authenticated encryption modes (namely OCB 2.0, Key
  Wrap, CCM, EAX, Encrypt-then-MAC (EtM), and GCM) have been
  standardized in ISO/IEC 19772:2009.

RFC5116:
   It may be desirable to define an AEAD algorithm that uses the generic
   composition with the encrypt-then-MAC method [BN00], combining a
   common encryption algorithm, such as CBC [MODES], with a common
   message authentication code, such as HMAC-SHA1 [RFC2104] or AES CMAC
   [CMAC].  An AEAD algorithm of this sort would reflect the best
   current practice, and might be more easily supported by crypto
   modules that lack support for other AEAD algorithms.

Related:
- http://www.daemonology.net/blog/2009-06-24-encrypt-then-mac.html
- http://crypto.stackexchange.com/questions/202/should-we-mac-then-encrypt-or-encrypt-then-mac

TODO: read, input from Sam, who also asks "why would you want AEAD?"

[[file:~/Persistent~/usr/share/ietf/in-notes/rfc5246.txt][RFC5246]]:

   In AEAD encryption, the plaintext is simultaneously encrypted and
   integrity protected.  The input may be of any length, and aead-
   ciphered output is generally larger than the input in order to
   accommodate the integrity check value.

[[file:~/Persistent~/usr/share/ietf/internet-drafts/draft-gutmann-tls-encrypt-then-mac-03.txt][Gutmann's draft]]:

3.  Applying Encrypt-then-MAC
[...]
   Note from the GenericStreamCipher/GenericBlockCipher annotation that
   this only applies to standard stream and block ciphers that have
   distinct encrypt and MAC operations.  It does not apply to
   GenericAEADCiphers that already include integrity protection with the
   cipher.  If a server receives an encrypt-then-MAC request extension
   from a client and then selects an AEAD cipher suite, it MUST NOT send
   an encrypt-then-MAC response extension back to the client.
**** nick, email
On Mon, Nov 4, 2013 at 10:40 PM, Linus Nordberg <linus@nordberg.se> wrote:
> Hi Nick,
>
> I'm trying to understand why we want EtM as an AEAD mode.
>
> Why AEAD? What does AEAD give us that we wouldn't get from EtM with
> "ordinary" ciphers, i.e. what draft-gutmann-tls-encrypt-then-mac
> suggests?
>
> I'm not very good at this but I'd like to try to understand.

I'm fine with either alternative. What I'd really like to do is
obsolete the existing mac-pad-encrypt construction, and I don' t much
care how.

Rationale: Someday, maybe in a decade or so, TLS 1.2 and earlier will
be dead; it will no longer be necessary for most users to turn them
on, or for most software to implement them. When these versions are
finally gone, it would be great if their mistakes were gone too.  But
unless we either deprecate all existing CBC and stream ciphersuites,
or specify encrypt-then-mac for TLS 1.3, we'll be stuck with the
current nonsense for even longer.

So it seems to me.

--
Nick
** emails with nick on tor-ass@
*** From: Linus Nordberg <linus@torproject.org>
Subject: Re: [tor-assistants] IETF in Vancouver is going to be about privacy
To: Nick Mathewson <nickm@freehaven.net>
Cc: Tor Assistants <tor-assistants@lists.torproject.org>, Jacob Appelbaum <jacob@appelbaum.net>
Date: Tue, 10 Sep 2013 09:34:46 +0200 (7 weeks, 3 days, 9 hours ago)
X-Boundary: ____________________________________________________________________________________________________________________

Nick Mathewson <nickm@freehaven.net> wrote
Mon, 9 Sep 2013 19:41:20 -0400:

| > 1. How can Tor people help IETF to help us all? Do we want to get our
| > view on things and our knowledge about anonymity into RFC documents, for
| > reference and copying into other documents?
| 
| I think that getting people to realize that privacy in technology is
| mainly a matter of linkability is the key insight.

Good point. I'll keep that in mind.


| I think that there are a number of ways that people have been
| reasoning about security in designs that are not correct; I'll need to
| think more about that.  Perhaps it will turn into a blog post, but
| it's likely to be a contentious and flamebaity enough blog post that
| I'd almost want to start a personal blog for the purpose.

Reading that blog would alone help me frame discussions on lists and in
Vancouver. How can I help you get this started?


| I'll try to think of some more stuff.
| 
| > 2. How can IETF help Tor? Do we want some attention on our protocols,
| > design choices or maybe something else?
| 
| We need better options than TLS.

Did we start working on a design for TLS-minus-the-warts yet? Should we
bring such a thing to the IETF or would that be creating more trouble
than it would solve? Could it be used as a way of putting pressure on
the TLS wg, given they care at all about what protocol Tor uses? I guess
probably not.

Did we enumerate all things problematic with TLS somewhere? The
protocol, not any particular implementation. In Berlin I overheard Jake
discuss some of our current issues with ekr, who was not expressing
immediate disgust in any of the suggestions ("superencrypt" to avoid
fingerprinting, an argument for adopting Salsa20 and at least one more
thing that I have forgotten).


| Somebody should do something about the RNG problem. Unfortunately, the
| most problematic platforms (windows, phones) probably wouldn't listen.

A list of all the major PRNG implementations with solid technical
arguments would maybe be something that the IETF could adopt. That could
make a difference.

I think that the RNG issue is going to become even more important when
we start pushing towards more ephemeral keys.


| Cryptography-related working groups need to stop sucking up to NIST
| standards only. It seems as if this is the year that
| curve25519/salsa20/poly1305 finally gets standardized for TLS, but
| it's far from certain, and it's only the tip of the iceberg.

What are the alternatives? You mentioned ECRYPT in a post to
or-talk@. Could various ECRYPT II reports be used more than they are
today?


| >  I've heard that it might be
| > premature to try standardising Tor right now. Is that still the case?
| 
| Having seen the kind of silliness that sometimes pervades the TLS
| working group, I would hate for the Tor protocol to be subject to such
| ridiculousness.  Also, I'd hate to split the ecosystem into those
| protocols implementing "OpenTor" or "RFCxyzTor" and those implementing
| the latest Tor standard.  Perhaps I misunderstand how these things
| work, though, and there's a way for us to get the benefits without the
| risks.

I agree and I'd like to find out. I've talked to at least two
experienced IETFers who say they want to help Tor. They are Hannes
Tschofenig and Stephen Farrell, both on the perpass@ list. Would you be
willing to try figuring this out with their help? Please let me know if
you'd like an introduction in a non-public thread.
_______________________________________________
tor-assistants mailing list
tor-assistants@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-assistants



--------------------------------------------------------------------------------

*** From: Linus Nordberg <linus@torproject.org>
Subject: Re: IETF standardizing onion routing
To: Paul Syverson <syverson@itd.nrl.navy.mil>
Cc: tor-assistants@torproject.org
Date: Wed, 09 Oct 2013 23:17:17 +0200 (3 weeks, 1 day, 19 hours ago)
Reply-To: tor-assistants@lists.torproject.org
X-Boundary: ____________________________________________________________________________________________________________________

Paul Syverson <syverson@itd.nrl.navy.mil> wrote
Thu, 24 Mar 2011 10:36:04 -0400:

| On Thu, Mar 24, 2011 at 06:07:08AM -0700, Robert Ransom wrote:
| > On Thu, 24 Mar 2011 13:20:01 +0100
| > Linus Nordberg <linus@torproject.org> wrote:
| > 
| > > andrew@torproject.org wrote
| > > Thu, 24 Mar 2011 08:01:08 -0400:
| > > 
| > > | On Fri, Mar 18, 2011 at 01:16:14PM -0700, blibbet@gmail.com wrote 0.8K bytes in 26 lines about:
| > > | : 1) new IETF anonyminity list (in addition to their privacy list),
| > > | : and 2) IETF considering ontino routing standardization.
| > > | 
| > > | How can we help #2?  I both fear and am encouraged at such an effort.
| > > 
| > > Meto.
| > > 
| > > I'm currently sitting next to Hannes Tschofenig, on of the authors of
| > > draft-hansen-privacy-terminology and also present at the Boston meeting
| > > Nick went to.  We're now at a developer meeting in Prague precluding the
| > > IETF 80 meeting starting Monday.  As I understand it, he's heavily
| > > involved in the intersection between privacy and IETF.
| > > 
| > > Should I use this opportunity to try to make things happen in this area?
| > 
| > How could having the IETF take control over the protocols used in Tor
| > possibly benefit The Tor Project?
| > 
| 
| The real question is if they are likely to go forward on anonymity protocol
| standards anyway. If they are and come out with standards that some people
| are going to follow, then I assume Tor wants to be part of that rather
| than get into splits between the de facto standard and the official
| standard. (Can you say "Diffie Hellman parameter"?)
| It sounds like they are at least exploring going forward before bothering
| to get the Tor Project Inc. (or other relevant folks).
| 
| Note for those who won't know or recall: Back in the days of the Freedom
| network, ZKS kicked off an IRTF group that included some people from
| the IAB and with lots of drafts (not in that sense) written up by jbash.
| It faded with Freedom. If this does go forward, it may be worth
| reusing lots of that. (Or not Tor design was at most nascent at that
| point. And the world has changed in other ways.)
| Also its eventual demise may or may not also be a source of lessons.

Hi,

Picking up a thread from 1,5 years ago.

The world has changed even more now. Jake made a pretty huge impression
on some of the oldies in the IETF community in Berlin this summer. I'd
like to try to follow up at IETF88 in Vancouver, November 3-8, but I'm
not sure how this should be done and if I can do it all by myself. I
welcome more people to join and/or provide some ideas or even material
here.

I have a couple of questions in an email to this list from Sep 10
too. Anyone want to take a shot at them?

Also, Nick, did you ever write that blog post?



--------------------------------------------------------------------------------
*** From: Linus Nordberg <linus@torproject.org>
To: Nick Mathewson <nickm@freehaven.net>
Cc: Tor Assistants <tor-assistants@torproject.org>
Subject: Re: [tor-assistants] IETF standardizing onion routing
References: <4D83BD8E.4010600@gmail.com>
	<20110324120108.GB3529@necrid.lewman.is> <87k4foaexa.fsf@nordberg.se>
	<20110324060708.32f87187@gmail.com>
	<20110324143604.GA87594@buridan.fw5540.net>
	<87wqlmta8y.fsf@nordberg.se>
	<CAKDKvuzGvptgEWSgGr2vZkhbBcdAGuLeW2goJgGz3ed2RFzFMw@mail.gmail.com>
	<CAKDKvuw5nDwEAXAF7n8Y=knvC-JbJ0Fx9pZx7WD6GNVBLMCb7w@mail.gmail.com>
X-Draft-From: ("nnimap+adbc:INBOX.lists.tor.assistants" 24909)
Reply-To: tor-assistants@lists.torproject.org
Date: Thu, 10 Oct 2013 18:52:24 +0200
In-Reply-To: <CAKDKvuw5nDwEAXAF7n8Y=knvC-JbJ0Fx9pZx7WD6GNVBLMCb7w@mail.gmail.com>
	(Nick Mathewson's message of "Thu, 10 Oct 2013 11:51:59 -0400")
Message-ID: <871u3toypj.fsf@nordberg.se>
User-Agent: Gnus/5.13 (Gnus v5.13)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Boundary: ____________________________________________________________________________________________________________________

Nick Mathewson <nickm@freehaven.net> wrote
Thu, 10 Oct 2013 11:51:59 -0400:

| On Thu, Oct 10, 2013 at 11:39 AM, Nick Mathewson <nickm@freehaven.net> wrote:
| > On Wed, Oct 9, 2013 at 5:17 PM, Linus Nordberg <linus@torproject.org> wrote:
| >  [...]
| >>
| >> Picking up a thread from 1,5 years ago.
| >>
| >> The world has changed even more now. Jake made a pretty huge impression
| >> on some of the oldies in the IETF community in Berlin this summer. I'd
| >> like to try to follow up at IETF88 in Vancouver, November 3-8, but I'm
| >> not sure how this should be done and if I can do it all by myself. I
| >> welcome more people to join and/or provide some ideas or even material
| >> here.
| >
| > I still wouldn't object to having Tor be in Informational RFC,
| > although I also don't see much benefit to it.  (Being a standards
| > track RFC would be completely wrong.)
| >
| > My experience with the IETF over the last several months (mostly)
| > lurking on the some mailing lists has been that standards -- even
| > informational standards -- get used as an excuse for not improving
| > things just as often as they get used as a reason to do things
| > properly.  I would hate to have anybody implement RFC-Tor in a time
| > when torspec-Tor had diverged.
| >
| > I'm not immune to counterargument here, but watching the sausage get
| > made has turned my stomach a bit.
| 
| On the other hand, I _would_ love to have our specs come up to
| RFC-level quality.  And the ego boost would be pleasant.  And I'm not
| convinced that I'm necessarily right about my fear that a Tor RFC
| would represent a protocol fork.  So maybe what I should do is
| converse with people who want to help work on such a thing.

I think this is the right thing, but only if you (or a substantial set
of Roger Dingledines or Paul Syversons) do too.

The SAAG chairs Stephen Farrell <stephen.farrell@cs.tcd.ie> and Sean
Turner <turners@ieca.com> are the one I think that you should start
talking to. They have multiple times offered to help with all the IETF
specific nitty-gritty of writing drafts.


| Or maybe I should just start rewriting our specs in my Copious Spare Time.

I should have time to help with that, if you think that would be of help.


| >> I have a couple of questions in an email to this list from Sep 10
| >> too. Anyone want to take a shot at them?
| >
| > I'll have a quick look if I can find it.
| 
| Ah. Apparently I'm the person who *did* answer the other time.

You answered the first email, yes. Thanks.

The follow up questions are in Message-ID: <87y575t9ih.fsf@nordberg.se>
(sorry for messing up with the threads in my email from yesterday). 

A quick summary of my questions:

1. Is there a design for an option to TLS and should we bring such a
thing to the IETF?

2. Do we have a list of all things problematic with TLS?

3. Do we have a list of major PRNG implementations with comments on
their security?

4. What are the alternatives to NIST standards? Something from ECRYPT II?

5. Shall I put you or some other Tor people in touch with Stephen
Farrell, Sean Turner or Hannes Tschofenig? They want to help us.

--------------------------------------------------------------------------------

* README
- [[file:~/usr/share/ietf/internet-drafts/draft-hzhwm-start-tls-for-dns-00.txt]]
- [[file:/u/ietf/internet-drafts/draft-melnikov-email-tls-certs-01.txt]]
- [[file:/u/ietf/internet-drafts/draft-ietf-dane-smtp-with-dane-05.txt]]
- [[file:/u/ietf/internet-drafts/draft-perez-radext-radius-fragmentation-06.txt][lopez RADIUS fragment draft]] reviewed for abfab (2)
- https://tools.ietf.org/html/draft-hoffman-uta-opportunistic-tls-00 read
* Reviews
** DONE http://huitema.net/papers/draft-huitema-perpass-analthreat-00.txt
*** review
1st done, sent to huitema
*** text
Network Working Group                                         C. Huitema
Internet-Draft                                     Microsoft Corporation
Intended status: Informational                          October 28, 2013
Expires: May 01, 2014


              Passive Traffic Analysis Threats and Defense
                draft-huitema-perpass-analthreat-00.txt

Abstract

   Traffic analysis is used by various entities to derive "meta data"
   about Internet communications, such as who communicates with whom or
   what, and when.  We analyze how meta-data can be extracted by
   monitoring IP headers, DNS traffic, and clear-text headers of
   commonly used protocols.  We then propose a series of actions that
   would make traffic analysis more difficult.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 01, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.












Huitema                   Expires May 01, 2014                  [Page 1]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Passive Analysis Targets  . . . . . . . . . . . . . . . . . .   3
   3.  Analysis of IP headers  . . . . . . . . . . . . . . . . . . .   4
   4.  Linking IP addresses to user identities . . . . . . . . . . .   5
     4.1.  Monitoring POP3, IMAP or SIP clients for identifying
           users of IP addresses . . . . . . . . . . . . . . . . . .   5
     4.2.  Retrieving IP addresses from mail headers . . . . . . . .   6
     4.3.  Tracking address use with web cookies . . . . . . . . . .   7
     4.4.  Tracking address use with network graphs  . . . . . . . .   7
     4.5.  Stuff we have not thought off yet . . . . . . . . . . . .   7
   5.  Defenses against IP header monitoring . . . . . . . . . . . .   8
     5.1.  Client server encryption  . . . . . . . . . . . . . . . .   8
     5.2.  Clean-up E-mail headers . . . . . . . . . . . . . . . . .   8
     5.3.  Source address obfuscation  . . . . . . . . . . . . . . .   9
     5.4.  Network address translation . . . . . . . . . . . . . . .   9
     5.5.  IPv6 privacy addresses  . . . . . . . . . . . . . . . . .   9
     5.6.  Frequent address renumbering  . . . . . . . . . . . . . .  10
     5.7.  Multihoming . . . . . . . . . . . . . . . . . . . . . . .  10
     5.8.  Virtual Private Networks  . . . . . . . . . . . . . . . .  10
     5.9.  Web proxies . . . . . . . . . . . . . . . . . . . . . . .  10
     5.10. Onion routing and shuffle nets  . . . . . . . . . . . . .  11
     5.11. And there is more . . . . . . . . . . . . . . . . . . . .  11
   6.  Recommendations . . . . . . . . . . . . . . . . . . . . . . .  11
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  11
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11
   9.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  11
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  11
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  11
     10.2.  Informative References . . . . . . . . . . . . . . . . .  12
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  12









Huitema                   Expires May 01, 2014                  [Page 2]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


1.  Introduction

   The massive monitoring attacks that we know about seem to fall into
   three categories: listening to the content of communications in
   transit, accessing content of documents and past exchanges at a
   server, and analyzing traffic to find patterns of communications and
   deduce social exchanges.

   Other efforts address the "listening on conversations" attack, and
   how to prevent them with more or better encryption.  There are some
   good ideas for reducing the risk of accessing contents on server,
   such as storing encrypted contents on servers, or enabling
   distributed services so that users can chose server locations that
   they find more acceptable.  Enabling encryption will also reduce the
   capability to extract information from the e-mail or http headers.
   This draft focuses on a different set of threats, the monitoring and
   analysis of Internet Protocol headers to extract "metadata" such as
   the structure of social graphs or the timing of social events.

   This draft proceeds by analyzing first the information that the
   monitoring entities desire to acquire and that privacy advocates
   would like to protect.  These monitoring tools are expected to work
   for both IPv4 [RFC0791] and IPv6 [RFC2460].  We present then the
   mechanism of IP header monitoring, and discuss the critical problem
   of associating IP addresses to user identities.  We then review a
   series of mechanisms that might be used to mitigate IP header
   monitoring.

2.  Passive Analysis Targets

   Questioned about revelation that his secret services were monitoring
   all the phone calls of the populace, a famous leader defended himself
   by saying that no, we don't listen to your phone calls, we merely
   gather "meta data."  It turns out that meta data such as who called
   what telephone number and at what time is actually very valuable.

   The first target of traffic analysis is the graph of connectivity
   within a given population.  If we known that two phone numbers
   frequently call each other, we can infer that there is a relation
   between the owners of these numbers.  For example, if investigative
   services discover a pattern of calls between an old general and some
   young lady, they can infer the existence of some inappropriate
   relation, and eventually force the general to relinquish his
   leadership position.  Similarly, if we find a pattern of frequent
   calls between a small set of telephone numbers, we can infer the
   existence of some tight-knit network.  Further analysis can then lead
   to the evaluation that these are just the members of the same family
   or the same sports team, or on the contrary it can find that these



Huitema                   Expires May 01, 2014                  [Page 3]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


   are political opponents organizing themselves, or maybe in rare cases
   some members of an underground criminal organization.

   The second target of traffic analysis is the discovery of traffic
   surges.  If the monitoring of traffic reveals increased activity
   between a particular group, secondary analysis can be used to obtain
   more information on the activities of the group.  That secondary
   analysis will be able to find the difference between a family
   preparing a birthday event, a sports team training for a particular
   competition, a group of activists planning a political protest, and
   maybe in rare cases a group of criminals planning some nefarious act.

   Traffic can operate across multiple media.  Analysis of phone calls
   reveals patterns between phone numbers, but similar analysis can be
   applied to IP addresses.  Traffic analysis becomes much more valuable
   if the IP address can be associated with a personal email address or
   with a personal phone number.  This correlation is also a target of
   traffic analysis.

   For the defenders, the targets of traffic analysis become as many
   assets to be protected.  In the following analysis, we will focus on
   ways to thwart discovery of the graph of connectivity, timing of
   activity, and correlation between identifiers.

3.  Analysis of IP headers

   Internet traffic can be monitored by tapping Internet links, or by
   installing monitoring tools in Internet routers.  Of course, a single
   link or a single router only provides access to a fraction of the
   global Internet traffic.  However, monitoring a number of high
   capacity links or monitoring a set of routers placed at strategic
   locations provides access to a good sampling of Internet traffic.

   Tools like Cisco's NetFlow [RFC3954] allow administrators to acquire
   statistics about "sequence of packets with some common properties
   that pass through a network device."  The most common set of
   properties is the "five tuple" of source and destination addresses,
   protocol type, and source and destination ports.  These statistics
   are commonly used for network engineering, but could certainly be
   used for other purposes.

   Let's assume for a moment that IP addresses can be correlated to
   specific services or specific users.  Analysis of the sequences of
   packets will quickly reveal which users use what services, and also
   which users engage in peer-to-peer connection with other users.
   Analysis of traffic variations over time can be used to detect
   increased activity by particular users, or in the case of peer-to-
   peer connections increased activity within groups of users.



Huitema                   Expires May 01, 2014                  [Page 4]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


4.  Linking IP addresses to user identities

   In Section 3, we have assumed that IP addresses can be
   correlated with specific user identities.  This can be done in
   various ways.

   Tools like reverse DNS lookup can be used to retrieve the DNS names
   of servers.  In fact, since the addresses of servers tend to be quite
   stable and since servers are relatively less numerous than users, we
   can expect that large scale monitoring services maintain databases of
   servers' IP addresses to facilitate such retrieval.  On the other
   hand, the reverse lookup of users addresses is less informative.  For
   example, a lookup of the address currently used by my home network
   returns a name of the form "c-xxx-xxx-xxx-xxx.hsd1.wa.comcast.net" in
   which the symbols "xxx-xxx-xxx-xxx" correspond to the IP address used
   by my home network.  This particular type of reverse DNS lookup does
   not reveal much interesting information.

   Traditionally, the police has relied on Internet Service Providers
   (ISP) to provide identification on a case by case basis of the
   "owner" of a specific IP address.  This is a reasonably expedient
   process for police investigations, but large scale monitoring
   requires something more efficient.  If the monitoring service can
   secure the cooperation of the ISP, they may obtain the link between
   identity and address through some automated update process.  We may
   expect that some ISP will not willingly cooperate with large scale
   monitoring of their customers, in which case the monitoring entities
   have to rely on other methods.

   Even if the ISP does not cooperate, identity can often be obtained by
   analyzing the traffic.  We will discuss in the next section how SMTP
   and HTTP can leak information that links the IP address to the
   identity of the user.

4.1.  Monitoring POP3, IMAP or SIP clients for identifying users of IP
      addresses

   POP3 [RFC1939] and IMAP [RFC3501] are used to retrieve mail from mail
   servers, while a variant of SMTP [RFC5321] is used to submit messages
   through mail servers.  The IMAP connections originate from the
   client, and typically start with an authentication exchange in which
   the client proves its identity by answering a password challenge.

   If the protocol is executed in clear text, monitoring services can
   "tap" the links to the mail server, retrieve the user name provided
   by the client, and associate it with the IP address used to establish
   the connection.




Huitema                   Expires May 01, 2014                  [Page 5]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


   The same attack can be executed against the SIP protocol, [RFC3261]
   if the connection between the SIP UA and the SIP server operates in
   clear text.

   There are many instant messaging services operating over the Internet
   using proprietary protocols.  If any of these proprietary protocols
   includes clear-text transmission of the user identity, it can be
   tapped to provide an association between the user identity and the IP
   address.

4.2.  Retrieving IP addresses from mail headers

   The SMTP protocol specification [RFC5321] requires that each
   successive SMTP relay adds a "Received" header to the mail headers.
   The purpose of these headers is to enable audit of mail transmission,
   and perhaps to distinguish between regular mail and spam.  Here is an
   extract from the headers of a message recently received from the
   "perpass" mailing list:

   Received: from xxx-xxx-xxx-xxx.zone13.example.org (HELO ?192.168.1.100?)
    (xxx.xxx.xxx.xxx)
    by lvpsyyy-yyy-yyy-yyy.example.net with ESMTPSA
    (DHE-RSA-AES256-SHA encrypted, authenticated);
    27 Oct 2013 21:47:14 +0100
   Message-ID: <526D7BD2.7070908@example.org>
   Date: Sun, 27 Oct 2013 20:47:14 +0000
   From: Some One <some.one@example.org>


   This is the first "Received" header attached to the message by the
   first SMTP relay.  For privacy reason, the field values have been
   anonymized.  We learn here that the message was submitted by "Some
   One" on October 27, from a host behind a NAT (192.168.1.100) that
   used the IP address "xxx.xxx.xxx.xxx."  The information remained in
   the message, and is accessible by all recipients of the "perpass"
   mailing list, or indeed by any monitoring service that sees at least
   one copy of the message.

   For monitoring services, such information is just plain candy.
   Monitor enough e-mail traffic and you can regularly update the
   mapping between IP addresses and individuals.  Even if the SMTP
   traffic was encrypted, the monitoring service could still register to
   receive a copy of public mailing lists like "perpass," and then log
   the header fields.

   Similar information is available in the SIP headers [RFC3261].





Huitema                   Expires May 01, 2014                  [Page 6]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


4.3.  Tracking address use with web cookies

   Many web sites only encrypt a small fraction of their transactions.
   A popular pattern was to use HTTPS for the login information, and
   then use a "cookie" to associate following clear-text transactions
   with the user's identity.  Cookies are also used by various
   advertisement services to quickly identify the users and serve them
   with "personalized" advertisements.  Such cookies are particularly
   useful if the advertisement services wants to keep tracking the user
   across multiple sessions that may use different IP addresses.

   As cookies are sent in clear text, a monitoring service can build a
   database that associates cookies to IP addresses.  If the IP address
   is already identified, the cookie can be linked to the user identify.
   After that, if the same cookie appears on a new IP address, the new
   IP address can be immediately associated with the pre-determined
   identity.

4.4.  Tracking address use with network graphs

   There have been many publicly reported instances in which the police
   managed to find the owner of a "disposable" cell phone.  In theory
   this is hard, because there is no direct registration of the owner's
   identity.  But in practice, the identity can be inferred through
   analysis of network graphs.

   Suppose that the new owner of the cell phone uses it carelessly to
   call his mother, his brother, his boss and his preferred restaurant.
   Mother, brother, boss and restaurant are part of the "network graph"
   already collected by pervasive monitoring, and in fact constitute an
   almost unique signature of this particular individual.  A quick
   database search and voila, the cell phone is identified.

   The same approach can be applied to IP addresses.  Users do a lot of
   repeat visits to web sites, mail servers, game servers, instant
   messaging servers, etc.  These visits tend to follow time patterns.
   It is easy to imagine that if a particular pattern was seen from
   address "A" one day, and the same pattern from address "B" the next
   day, then A and B point to the same user, whose computer just got a
   new address.  At that point, the user may be identified only as a
   "case number," but the real identity can be filled as soon as email
   monitoring is successful, or sip monitoring, or maybe some ISP
   cooperation.

4.5.  Stuff we have not thought off yet

   The previous sections listed a number of known ways to extract
   identities from IP addresses.  This is by no means an exhaustive



Huitema                   Expires May 01, 2014                  [Page 7]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


   list.  There are certainly other possibilities, for example
   monitoring of public Wi-Fi networks and tracking of association
   between MAC addresses and IP addresses, or monitoring of various
   authentication services.

5.  Defenses against IP header monitoring

   In the current state of the Internet, defense against monitoring is
   very hard.  There are many ways to associate IP addresses with user
   identity.  Tapping of big Internet pipes is bound to provide a trove
   of data.  Retrieving social graphs and detecting surges of activity
   is well within the means of a well funded monitoring service.  But
   this does not mean that the Internet engineering community should
   just give up.  Even if we cannot stop this monitoring completely, we
   can certainly make it harder and less reliable.

   The first version of this internet draft presents a list of potential
   defenses that have been mentioned in various discussions.  This list
   is not exhaustive, and is also not prioritized.  It is merely a
   recollection of a number of suggestions.

5.1.  Client server encryption

   The previous analysis shows that IP traffic analysis is facilitated
   by the discovery of relations between IP addresses and users.
   Encryption of the client-server protocols will deprive monitoring of
   this source of information.

   The analysis was conducted for mail protocols (POP3, IMAP, SMTP) and
   for SIP.  Encrypting these protocols is of course a priority.  But if
   we want to really mitigate the threat of disclosing identity to
   address mappings, we should encrypt any protocol that carries a
   description of the user identity.

5.2.  Clean-up E-mail headers

   The initial "Received" field of e-mail headers carries the IP address
   from which the e-mail was submitted.  This is equivalent to
   broadcasting the mapping between that IP address and the user
   identity.  We should seriously consider the tradeoff between privacy
   and auditability that this feature afford.

   A reasonable tradeoff could be to not publish the IP address or the
   domain name of the initial submitter, and to start the "Received"
   list with the IP address of the mail server.  We should however
   consider the case where the first server is a "home" server, whose
   public IP address is the same as that of the user.  Ideally, we
   should not publish that either.



Huitema                   Expires May 01, 2014                  [Page 8]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


   The same reasoning should apply to any protocol that publishes a
   trace of successive server addresses in its headers.  At some point,
   auditability should give way to privacy.

5.3.  Source address obfuscation

   Jon Crowcroft suggested a nice idea a few years ago, although for a
   different reason: sourceless network architecture [SNA].  Send
   packets with no source address, and you make the metadata much less
   useful.  (Of course, if the packet is to get a reply, the source
   address needs to be encrypted in the payload.)

   The idea is largely theoretical, and would require significant
   changes in a number of widely deployed protocols, including TCP.

5.4.  Network address translation

   Many home networks use "network address translation" (NAT) [RFC3022]
   to share a single IPv4 address between several computers, and
   possibly several users.  NAT are also used in some enterprise
   networks and in some Wi-Fi "hot spots."  Some ISP's have also begun to use
   NAT, providing "private" addresses to their subscribers.

   NAT complicates the task of IP header monitoring, because a
   particular address may be shared between multiple users.  If the
   address is only shared between few users, like the members of a
   family sharing a home network, monitoring services can probably use
   analysis techniques to retrieve the individual connections, and NAT
   may not be more than a speed bump.  If the sharing pool is much
   larger, like all the subscribers to a medium size ISP, monitoring
   becomes significantly harder.

5.5.  IPv6 privacy addresses

   It is ironic to notice that as IPv6 improves "address transparency"
   by removing the need for address translation, it also makes
   monitoring significantly easier than when using NAT.  But the Privacy
   Extensions for Stateless Address Autoconfiguration in IPv6 [RFC4941]
   allow users to configure temporary IPv6 addresses out of a global
   prefix.  Privacy addresses are meant to be used for a short time,
   typically no more than a day, and are specifically designed to render
   monitoring based on IPv6 addresses harder.

   Privacy extensions only affect the least significant 64 bits of the
   IPv6 address.  The most significant 64 bits remain unaffected.  The
   64 bit prefix is typically allocated to a small network, e.g., a
   single household or a Wi-Fi hot spot.  It has pretty much the same
   identifying power as an IPv4 address.  If the network is small in



Huitema                   Expires May 01, 2014                  [Page 9]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


   size, the use of privacy addresses, just like the use of NAT, will be
   a mere speed bump for IP header monitoring.

5.6.  Frequent address renumbering

   In the days of modem networking, a computer would receive a new IPv4
   address each time it connected to the Internet.  Always on broadband
   connections may or may not provide the subscribers with permanent
   stable addresses.  Some users pay extra for the convenience of a
   stable address.  Of course, stable addresses greatly facilitate IP
   header monitoring.

   In contrast, we could imagine that the broadband modem is re-
   provisioned at regular interval with a new IPv4 address, or with a new
   IPv6 address prefix.  Some convenience will be lost, and TCP
   connections active before the renumbering will have to be
   reestablished.  However, the renumbering will significantly
   complicate the task of IP header monitoring.

5.7.  Multihoming

   Multihoming is the practice of using multiple connections
   simultaneously.  If done well, multihoming will split the graph of
   connectivity in interesting ways.  Packets will travel over different
   routes, IP addresses will be different.  Multihoming could make IP
   header monitoring harder.

5.8.  Virtual Private Networks

   Virtual private networks (VPN) allow users to set up a "tunnel"
   across the Internet to a "virtual" connection point, and effectively
   provide a form of multihoming.  Since the connections are virtual,
   VPN could also provide a form of frequent address renumbering.  As
   such, VPN can provide some resistance against IP address monitoring.

   VPN's require careful configuration and setup to prevent leakage of
   identifying information.  Tech that purports to secure or privatize
   your communication but that actually leaks - or worse, can be coerced
   into revealing your traffic, is worse than no tech at all.

5.9.  Web proxies

   Sending HTTP requests through web proxy is a way to hide the actual
   IP source of the request, and as such a way to complicate monitoring.







Huitema                   Expires May 01, 2014                 [Page 10]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


   Much like VPN, web proxies are a two edged sword.  If the proxy is
   compromised, the true origin of the traffic can be retrieved.
   Moreover, the proxy could become an observation point to monitor the
   web traffic.

5.10.  Onion routing and shuffle nets

   Services like Tor provide an obvious form of resistance against IP
   header monitoring.

5.11.  And there is more

   There are certainly more potential defenses, which will emerge during
   the discussion of this draft.

6.  Recommendations

   The following recommendations are an attempt to summarize the threat
   and mitigation analysis in the previous sections:

   o  Use encryption.  In particular, never send a user identity in
      clear text.

   o  Ask "submission" SMTP server to obfuscate the IP address of the
      user, and not place it in mail headers.

   o  Not completely written yet...

7.  Security Considerations

   This draft does not introduce new protocols.  It does present a
   series of attacks on existing protocols, and proposes an assorted set
   of mitigations.

8.  IANA Considerations

   This draft does not require any IANA action.

9.  Acknowledgments

   The inspiration for this draft came from discussions in the Perpass
   mailing list.  Some of the text was contributed in messages to the
   list by Dave Nix, Brian Trammel and Brian Carpenter.

10.  References

10.1.  Normative References




Huitema                   Expires May 01, 2014                 [Page 11]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


   [RFC2026]  Bradner, S., "The Internet Standards Process -- Revision
              3", BCP 9, RFC 2026, October 1996.

10.2.  Informative References

   [RFC0791]  Postel, J., "Internet Protocol", STD 5, RFC 791, September
              1981.

   [RFC1939]  Myers, J. and M. Rose, "Post Office Protocol - Version 3",
              STD 53, RFC 1939, May 1996.

   [RFC2460]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
              (IPv6) Specification", RFC 2460, December 1998.

   [RFC3022]  Srisuresh, P. and K. Egevang, "Traditional IP Network
              Address Translator (Traditional NAT)", RFC 3022, January
              2001.

   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,
              A., Peterson, J., Sparks, R., Handley, M., and E.
              Schooler, "SIP: Session Initiation Protocol", RFC 3261,
              June 2002.

   [RFC3501]  Crispin, M., "INTERNET MESSAGE ACCESS PROTOCOL - VERSION
              4rev1", RFC 3501, March 2003.

   [RFC3954]  Claise, B., "Cisco Systems NetFlow Services Export Version
              9", RFC 3954, October 2004.

   [RFC4941]  Narten, T., Draves, R., and S. Krishnan, "Privacy
              Extensions for Stateless Address Autoconfiguration in
              IPv6", RFC 4941, September 2007.

   [RFC5321]  Klensin, J., "Simple Mail Transfer Protocol", RFC 5321,
              October 2008.

   [SNA]      Crowcroft, J. and M. Bagnulo, "SNA: Sourceless Network
              Architecture", June 2008,
              <https://www.cl.cam.ac.uk/~jac22/talks/sna.ppt>.

Author's Address










Huitema                   Expires May 01, 2014                 [Page 12]

Internet-DraftPassive Traffic Analysis Threats and Defense  October 2013


   Christian Huitema
   Microsoft Corporation
   One Microsoft Way
   Redmond, WA  98052-6399
   U.S.A.

   Email: huitema@huitema.net












































Huitema                   Expires May 01, 2014                 [Page 13]
** TODO [[file:~/usr/share/ietf/internet-drafts/draft-trammell-perpass-ppa-00.txt]]
*** review
**** speling, take 1
Typos and speling diff attached. Please disregard line numbers.

http://datatracker.ietf.org/drafts/current/ should be https://.

Any idea how we can get http://trustee.ietf.org/license-info over https?

***** diff
@@ -831,7 +832,7 @@ Table of Contents
    priori that communications systems should aim to provide appropriate
    privacy guarantees to their users, and that such pervasive
    surveillance is therefore a bad thing.  Therefore, susceptibility to
-   pervasive surveillance should avoided as a design goal in protocol
+   pervasive surveillance should be avoided as a design goal in protocol
 
 
 
@@ -919,7 +920,7 @@ Internet-Draft          Perfect Passive
    individual at the other endpoint: the compromise is then truly out of
    the scope of the communication enabled by the protocol.
 
-   We further assume the PPA does not have priviliged information
+   We further assume the PPA does not have privileged information
    allowing the reversal of encryption, e.g. compromised key material or
    knowledge of weaknesses in the design or implementation of
    cryptographic algorithms at the initiator, recipient, and/or
@@ -1013,7 +1014,7 @@ Internet-Draft          Perfect Passive
    packets, or grouping information into more/fewer packets can reduce
    this risk at the expense of usable bandwidth; though this is
    implementation guidance, protocols should make it possible do to
-   dhis.  Similarly, fingerprinting can rely on inter-packet timing
+   this.  Similarly, fingerprinting can rely on inter-packet timing
    information: injecting delay into packet transmission can reduce this
    risk at the expense of latency.]

*** text
perpass non-WG                                               B. Trammell
Internet-Draft                                                ETH Zurich
Intended status: Informational                        September 04, 2013
Expires: March 08, 2014


  The Perfect Passive Adversary: A Threat Model for the Evaluation of
                 Protocols under Pervasive Surveillance
                   draft-trammell-perpass-ppa-00.txt

Abstract

   This document elaborates a threat model for the Perfect Passive
   Adversary (PPA): an adversary with an interest in eavesdropping that
   can passively observe network traffic at every layer at every point
   in the network between the endpoints.  It is intended to demonstrate
   to protocol designers and implementors the observability and
   inferability of information and metainformation transported over
   their respective protocols, to assist in the evaluation of the
   performance of these protocols and the effectiveness of their
   protection mechanisms under pervasive passive surveillance.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 08, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents



Trammell                 Expires March 08, 2014                 [Page 1]

Internet-Draft          Perfect Passive Adversary         September 2013


   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Open Issues . . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  The Perfect Passive Adversary . . . . . . . . . . . . . . . .   3
   5.  Threat analysis . . . . . . . . . . . . . . . . . . . . . . .   4
     5.1.  Information subject to direct observation . . . . . . . .   5
     5.2.  Metainformation useful for inference  . . . . . . . . . .   5
   6.  Guidelines for protocol evaluation  . . . . . . . . . . . . .   5
   7.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .   6
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   6
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .   6
     8.2.  Informative References  . . . . . . . . . . . . . . . . .   6
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   6

1.  Open Issues

   1.  Lots of things need citations that don't have them yet.

   2.  Threat analysis and protocol design guidelines need to be
       completed, which will require them to be started too.

2.  Introduction

   Surveillance is defined in [RFC6973], Section 5.1.1, as "the
   observation or monitoring of an individual's communications or
   activities".  Pervasive passive surveillance is the practice of
   surveillance at widespread observation points, without any
   modification of network traffic, and without any particular
   surveillance target in mind.  Pervasive passive surveillance allows
   subsequent analysis and inference to be applied to the collected data
   to achieve surveillance aims on a target to be identified later, or
   to analyze general communications patterns and/or behaviors without a
   specified target individual or group.

   An analysis of the costs and benefits of pervasive passive
   surveillance is explicitly out of scope of this work; we presume a
   priori that communications systems should aim to provide appropriate
   privacy guarantees to their users, and that such pervasive
   surveillance is therefore a bad thing.  Therefore, susceptibility to
   pervasive surveillance should be avoided as a design goal in protocol



Trammell                 Expires March 08, 2014                 [Page 2]

Internet-Draft          Perfect Passive Adversary         September 2013


   design.  From these assumptions we take the very act of pervasive
   surveillance to be adversarial by definition.

   This document outlines a threat model for an entity performing
   pervasive passive surveillance, termed the Perfect Passive Adversary
   (PPA), and explores how to apply this model to the evaluation of
   protocols.  As the primary threat posed by pervasive surveillance is
   a threat to the privacy of the parties to a given communication, this
   document is heavily based on [RFC6973].

3.  Terminology

   The terms Anonymity, Anonymity Set, Anonymous, Attacker,
   Eavesdropper, Fingerprint, Fingerprinting, Identifier, Identity,
   Individual, Initiator, Intermediary, Observer, Pseudonym,
   Pseudonymity, Pseudonymous, Recipient, and Traffic Analysis are used
   in this document as defined by Section 3, Terminology, of [RFC6973].
   In addition, this document defines the following terms:

   Observation:   Information collected directly from communications by
      an eavesdropper or observer.  For example, the knowledge that
      <alice@example.com> sent a message to <bob@example.com> via SMTP
      taken from the headers of an observed SMTP message would be an
      observation.

   Inference:   Information extracted from analysis of information
      collected directly from communications by an eavesdropper or
      observer.  For example, the knowledge that a given web page was
      accessed by a given IP address, by comparing the size in octets of
      measured network flow records to fingerprints derived from known
      sizes of linked resources on the web servers involved would be an
      inference.

4.  The Perfect Passive Adversary

















Trammell                 Expires March 08, 2014                 [Page 3]

Internet-Draft          Perfect Passive Adversary         September 2013


   The perfect passive adversary (PPA) is an eavesdropper that can
   potentially observe every packet of all communications at any or
   every hop in a network path between the outward-facing network
   interface of the last trusted machine in the initiator's
   administrative domain and the recipient, but can take no other action
   with respect to these communications.  Limiting the adversary to
   being completely passive may under-represent the threat to
   communications privacy posed especially by well-resourced
   adversaries, but represents well the maximum capability of a single
   entity whose surveillance is undetectable without physically securing
   the entire network path.  We also assume that the PPA does not have
   unlimited resources, i.e., that it will attempt to eavesdrop at the
   most efficient observation point available to it, and will collect as
   little raw data as necessary to support its aims.

   We explicitly assume the PPA does not have the ability to compromise
   trusted systems at either the initiator or a recipient of a
   communication.  Indeed, if the adversary is cooperating with one of
   the communications endpoints, there is no guidance to give to
   protocol designers that would improve the privacy and security of the
   individual at the other endpoint: the compromise is then truly out of
   the scope of the communication enabled by the protocol.

   We further assume the PPA does not have privileged information
   allowing the reversal of encryption, e.g. compromised key material or
   knowledge of weaknesses in the design or implementation of
   cryptographic algorithms at the initiator, recipient, and/or
   intermediaries.  While these risks do exist in the real world, the
   threat model is simplified if we presume that a given cryptographic
   protection for a protocol works as advertised.

   The tools available to the PPA are therefore direct observation and
   inference.  Direct observation involves taking information directly
   from eavesdropped communications - e.g., URLs identifying content or
   email addresses identifying individuals from application-layer
   headers.  Inference, on the other involves analyzing eavesdropped
   information to derive new information from it; e.g., searching for
   application or behavioral fingerprints in observed traffic to derive
   information about the observed individual from them, in absence of
   directly-observed sources of the same information.

5.  Threat analysis

   On initial examination, the PPA would appear to be trivially
   impossible to defend against.  If the PPA has access to every byte of
   every packet of a communication, then full application payload and
   content is available.  Guidance to protocol designers to provide
   cryptographic protection of confidentiality in their protocols (e.g.,



Trammell                 Expires March 08, 2014                 [Page 4]

Internet-Draft          Perfect Passive Adversary         September 2013


   through the use of TLS [RFC5246] at the transport layer and S/MIME
   [RFC3851] end-to-end) improves this situation somewhat, but metadata
   such as source and destination IP addresses and ports are still
   available to allow correlation and association of communications.
   Protocols that route messages based on recipient identifier or
   pseudonym, such as SMTP [RFC2821] and XMPP [RFC6120], still require
   intermediate systems to handle these.  If each hop of the
   communication is not secured, these identifiers may be available to
   an eavesdropper.

   Assuming that the PPA's resources are not unlimited allows us to back
   away from this worst-case scenario.  Storing full packet information
   for a fully-loaded 10 Gigabit Ethernet link will fill one 4TB hard
   disk (the largest commodity hard disk available as of this writing)
   in less than an hour; storing network flow data from the same link,
   e.g. as IPFIX Files [RFC5655], requires on the order of 1/1000 the
   storage (i.e., 4GB an hour).  Flow-based surveillance approaches,
   which store only communications metadata, are therefore more scalable
   for pervasive surveillance, so it is worthwhile to analyze
   information which can be inferred from various network traffic
   capture and analysis techniques other than full packet capture.

   In the remainder of this analysis, we list kinds of information which
   can be directly observed and those which can be used for inference
   through e.g. fingerprinting.  The former group may seem somewhat
   obvious, but are included for completeness.

5.1.  Information subject to direct observation

   [EDITOR'S NOTE: list includes but not limited to communications
   content, application-layer identifiers, network- and transport-layer
   identifiers, association of DNS queries with subsequent usage of
   information in the answers.]

5.2.  Metainformation useful for inference

   [EDITOR'S NOTE: list includes but not limited to interpacket timing;
   packet sizes; flow packet and octet counts; presence of options which
   could lead to OS fingerprinting for deNATting, etc.]

6.  Guidelines for protocol evaluation

   [EDITOR'S NOTE: How to look at a protocol and evaluate the
   observability of the information it transports?]

   [EDITOR'S NOTE: General guidance: end-to-end encryption when
   possible.  Apply unlinked pseudonyms for message routing on envelopes
   around end-to-end encrypted content.]



Trammell                 Expires March 08, 2014                 [Page 5]

Internet-Draft          Perfect Passive Adversary         September 2013


   [EDITOR'S NOTE: General guidance: Fingerprinting can rely on packet
   and flow size information; the inclusion of null information in
   packets, or grouping information into more/fewer packets can reduce
   this risk at the expense of usable bandwidth; though this is
   implementation guidance, protocols should make it possible do to
   this.  Similarly, fingerprinting can rely on inter-packet timing
   information: injecting delay into packet transmission can reduce this
   risk at the expense of latency.]

7.  Acknowledgments

   Thanks to Dilip Many, Daniel Borkmann, and Stephan Neuhaus, who
   contributed to an initial version of this work.

8.  References

8.1.  Normative References

   [RFC6973]  Cooper, A., Tschofenig, H., Aboba, B., Peterson, J.,
              Morris, J., Hansen, M., and R. Smith, "Privacy
              Considerations for Internet Protocols", RFC 6973, July
              2013.

8.2.  Informative References

   [RFC2821]  Klensin, J., "Simple Mail Transfer Protocol", RFC 2821,
              April 2001.

   [RFC3851]  Ramsdell, B., "Secure/Multipurpose Internet Mail
              Extensions (S/MIME) Version 3.1 Message Specification",
              RFC 3851, July 2004.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246, August 2008.

   [RFC5655]  Trammell, B., Boschi, E., Mark, L., Zseby, T., and A.
              Wagner, "Specification of the IP Flow Information Export
              (IPFIX) File Format", RFC 5655, October 2009.

   [RFC6120]  Saint-Andre, P., "Extensible Messaging and Presence
              Protocol (XMPP): Core", RFC 6120, March 2011.

Author's Address








Trammell                 Expires March 08, 2014                 [Page 6]

Internet-Draft          Perfect Passive Adversary         September 2013


   Brian Trammell
   Swiss Federal Institute of Technology Zurich
   Gloriastrasse 35
   8092 Zurich
   Switzerland

   Phone: +41 44 632 70 13
   Email: trammell@tik.ee.ethz.ch











































Trammell                 Expires March 08, 2014                 [Page 7]
** DONE draft-ietf-abfab-arch-10.txt


   This is the minimum amount of identity information necessary for
   ABFAB to work - it indicates an IdP that the principal has a
   relationship with.  EAP methods that do not allow this will
   necessarily also reveal an identifier for the principal in the IdP
   realm (e.g. a username).
   ...
   In this phase, the IdP communicates with the RP informing it as to
   the success or failure of authentication of the user, and optionally,
   the sending of identity information about the principal.

s/principal/ABFAB client/g
                                                                   As no
   end-to-end security is provided by AAA, all AAA entities on the path
   between the RP and IdP have the ability to eavesdrop on this
   information unless additional security measures are taken (such as
   the use of TLS for RADIUS [I-D.ietf-radext-dtls]).
   ...
                                                      As before, when
   sending this through RADIUS headers, all AAA entities on the path
   between the RP and IdP have the ability to eavesdrop unless
   additional security measures are taken (such as the use of TLS for
   RADIUS [I-D.ietf-radext-dtls]).

s/I-D.ietf-radext-dtls/RFC6614/g

                                                                   As no
   end-to-end security is provided by AAA, all AAA entities on the path
   between the RP and IdP have the ability to eavesdrop on this
   information unless additional security measures are taken (such as
   the use of TLS for RADIUS [I-D.ietf-radext-dtls]).

Note that RADIUS proxies on the path see all RADIUS datagrams even
when RADIUS/TLS or RADIUS/DTLS is being used.


More nits:
s/was"/was/1
s/from the IDP to the RP/from the IdP to the RP/1
s/per-message services will limit/per-message security services will limit/1

** TODO draft-ietf-abfab-gss-eap-09.txt
s/[RFC4462]describes/[RFC4462] describes/1
s/the EAP method in use support/the EAP method in use supports/1
The last sentence in section 5.8 is incomplete.
s/a EAP/an EAP/1
s/incremented to each call/incremented for each call/1
s/involve an EAP supplicant/involve an EAP peer/1
s/IDP and RP/IdP and RP/1
I-D.ietf-radext-radsec is now RFC6614
* STRINT 2014 position papers
https://www.w3.org/2014/strint/
** Public logs
Scratching this jan 14 since benl is doing exactly this.
*** Summary
There are certain types of data that is published on the internet and
subsequently used for securing further communication or
operation. Examples include public keys in X.509 certificates,
computer program binaries, Tor network maps and PGP keys.

Users may trust a publishers intent but not its performance or the
mechanisms used for getting the dat -- keys are getting stolen, web
servers broken into, [false public keys published,] internet
connections man-in-the-middled.

This paper is meant as a starting point for a discussion about how
public append-only logs can be used to increase the chance of
detecting the tampering of crucial data at rest or in transit.
*** some use cases
Web clients trust x509 certificates signed by anybody who's got hold
of a private key of a CA. [CT] addresses this by having CA:s and web
site owners (i.e. customers of CA:s) submit their cert chains to one
or more logs. Website owners get a signed time stamp in return which
is sent to web clients (as part of TLS negotiation) as a proof of the
cert being in a log. Web clients verify time stamps (potentially slow)
separately from setting up TLS connections (which has to be quick).

Several other protocols need a public key to be fetched over internet.
PGP keys for encrypted email and OTR keys for encrypted chat. PGP keys
are typically published by the owner of the key and downloaded from
public servers by name or email address. Nothing stops Mallory from
generating and uploading keys carrying other peoples names. The
servers that PGP keys are being fetched from can be broken into or
impersonated.

Computer programs are sometimes verified with a checksum. Attack:
Checksum files can be altered at the point of distribution, typically
a web server. Attack: Users can be redirected to an alternative web
site for downloading both the binaries and the checksums (MITM).

Tor network maps are downloaded by clients. Attack: Get hold of the
signing key for a majority of the directory authorities and sign a
fake consensus listing relays that are under your own control. DA:s
could submit consensuses the produce (and votes they produce and
receive). Clients could submit consensuses they see.

*** Who submits to the logs?
Publishers can submit what they publish.

How do users trust these particular log entries? In CT, the data has
structure and a secret key from one of a few known entities is
required for an entry to be accepted.


End users could report what's seen in the wild. 

Are they authenticated? risk for user tracking. also, it would require
an administrative relationship between users and log
providers.

Believe in the numbers? easily (?) abused by spamming the
logs.

Reputation based system? requires authn (?).

*** How CT does it
#. Publishers of certain types of data submit proofs of existence of
   their data to public append-only logs.

#. Users of that data verify it by looking it up in the
   logs. Existence proves that someone has seen and submitted it.

#. Publishers audit logs to find out if someone else has submitted a
   proof in their name.

#. Auditors verify that logs don't lie about what's been submitted.

*** [reusable?]
Trusting data that's been delivered over an insecure network has never
been a good idea. We've known this for a long time but didn't care
that much. Recently published documentation of large scale attacks on
the infrastructure we call the internet has made more people aware of
this fact.

In parallel with making the use of computer networks more secure we
should make it more expensive to trick users into using [fake
data]. One way of doing this is to increase the chance for detection
of someone feeding a user something else than what she was asking for.

Examples of data that is commonly fetched over insecure networks to be
used for securing future communication include computer programs,
public cryptographic keys and [Tor network maps]. If the trust roots
being used for verifying this data is compromised, an attacker can
feed the user its own variant of the data and elevate its control over
the user.

Given the existence of public append-only logs, users could submit
their view of critical data that they care about. Users that care
about the authenticity of certain data downloaded over insecure
networks can use these logs to make a more informed decision on
whether the data they've been handed is what everybody else sees or if
they're being fed something else.

[TODO: add note on the type of data it can be used for, i.e. maybe not
HTML code delivered to a browser. only slowly changing data or data
changing under strict control? in cooperation with the publisher of
data only?  we want protection against lying or pwned publisher.]

*** Types of attacks
In the case of computer programs verified with checksums, one attack
is to change the checksum files at the point of distribution,
typically a web server. Another is redirecting the user to an
alternative web site for downloading both the binaries and the
checksums.

Public keys are being downloaded in several applications, X.509
certificates for web browsing, PGP keys for encrypted email and OTR
keys for encrypted chat being prominent use cases. Certificate
Transparency [RFC6962] deals with the "lying CA problem" while there's
yet to be seen initiatives for increasing the chance of detecting
false PGP and OTR keys being handed to end users.

Regarding Tor consensuses, being able to detect attempts to feed Tor
users a fake network map would be valuable as an indication of
compromised authority keys. The attack here would be to get hold of a
copy of a majority of the authority identity or signing keys and sign
a fake consensus listing relays that are under the control of the
attacker.

*** Use cases
Examples of logs that could be used for this include Certificate
Transparency (RFC6962) and the Bitcoin chains.

Example usage:
1. x509 certificate chain [CT]
2. tor network map (1d)
3. program binary (1m)
4. pgp key (1y)
5. otr key (1y)
6. dnssec key (ksk 5y, zsk 1m)
** Running tor exits
[TODO: running tor exits is easy -- set up an organisation, download
tor and off you go]
* abfab
[[file:~/usr/share/ietf/internet-drafts/draft-ietf-abfab-arch-12.txt]]
[[file:~/usr/share/ietf/internet-drafts/draft-ietf-abfab-aaa-saml-08.txt]]
[[file:~/usr/share/ietf/internet-drafts/draft-ietf-abfab-gss-eap-09.txt]] now RFC 7055
[[file:~/usr/share/ietf/internet-drafts/draft-ietf-abfab-eapapplicability-06.txt]] now RFC 7057
[[file:~/usr/share/ietf/internet-drafts/draft-ietf-abfab-usecases-05.txt]]
[[file:~/usr/share/ietf/internet-drafts/draft-ietf-abfab-usability-ui-considerations-00.txt]]

   +----------+-----------+--------------------+-----------------------+
   | Protocol | Client    | Relying Party      | Identity Provider     |
   +----------+-----------+--------------------+-----------------------+
   | ABFAB    | Client    | Relying Party (RP) | Identity Provider     |
   |          |           |                    | (IdP)                 |
   |          |           |                    |                       |
   |          | Initiator | Acceptor           |                       |
   |          |           |                    |                       |
   |          |           | Server             |                       |
   |          |           |                    |                       |
   | SAML     | Subject   | Service Provider   | Issuer                |
   |          |           |                    |                       |
   | GSS-API  | Initiator | Acceptor           |                       |
   |          |           |                    |                       |
   | EAP      | EAP peer  | EAP Authenticator  | EAP server            |
   |          |           |                    |                       |
   | AAA      |           | AAA Client         | AAA server            |
   |          |           |                    |                       |
   | RADIUS   | user      | NAS                | RADIUS server         |
   |          |           |                    |                       |
   |          |           | RADIUS client      |                       |
   +----------+-----------+--------------------+-----------------------+

[[file:~/usr/share/ietf/in-notes/rfc3748.txt]] EAP
[[file:~/usr/share/ietf/in-notes/rfc7055.txt]] a GSS-API mech for EAP
[[file:~/usr/share/ietf/in-notes/rfc7057.txt]] update to EAP for ABFAB
[[file:~/usr/share/ietf/in-notes/rfc7029.txt]] EAP mutual cryptographic binding using EMSK
[[file:~/usr/share/ietf/in-notes/rfc6677.txt]] channel binding for EAP methods
[[file:~/usr/share/ietf/in-notes/rfc4121.txt]] Kerberos GSS-API v2
[[file:~/usr/share/ietf/internet-drafts/draft-ietf-emu-eap-tunnel-method-10.txt]] TEAP
[[file:~/usr/share/ietf/in-notes/rfc5056.txt]] (GSS-API) channel binding
[[file:~/usr/share/ietf/in-notes/rfc3579.txt]] EAP over RADIUS
[[file:~/usr/share/ietf/in-notes/rfc4462.txt]] GSS-API authn & kex for SSH
[[file:~/usr/share/ietf/in-notes/rfc4253.txt]] SSH transport, incl. DH kex
[[file:~/usr/share/ietf/in-notes/rfc6678.txt]] tunnel-based EAP methods, requirements
[[http://eprint.iacr.org/2002/163.pdf]] tunneled protocols and MITM, paper
[[file:~/usr/share/ietf/in-notes/rfc4422]] SASL
[[file:~/usr/share/ietf/in-notes/rfc5801.txt]] GS2

People other than Sam who, according to Leif, might know about
security and ABFAB include Alan DeKok, J. Salowey, Stefan Winter and
Josh Howlett. I bet Luke knows something too.

** conversations, chat and email
*** hartmans <2014-01-30 Thu>
[2014-01-29 14:04] linus> hartmans: hi. could you explain what the
problem is with the DH key exchange in RFC 4462, from an ABFAB
perspctive?
Thu 30 Jan 2014 05:00
[2014-01-30 05:57] hartmans> I know of no such problem.
Thu 30 Jan 2014 09:00
[09:03] > Subject: Moonshot Developer's Meeting
hartmans has set the subject to: Moonshot Developer's Meeting
[09:19] linus> hartmans: badly phrased question. my appologies and let
me start over.
[09:21] linus> you've said on abfab@ that ephemeral keying in abfab
will benefit protocols like nfs and rfc 4462 kexing more than
protocols using tls for transport.
[09:22] linus> since gssapi ssh kexing already does DH i got the
impression that it was bad in some way and that abfab could fix that.
[09:37] linus> but now i think that what you meant was that it'd be
great if we could support DH in an abfab gssapi mech too, since we
won't be able to use 4462. correct?
Thu 30 Jan 2014 15:00
[15:58] > hartmans <hartmans@painless-security.com> has left the
chatroom
[15:58] > hartmans <hartmans@painless-security.com> enters the room
(moderator, owner)
Thu 30 Jan 2014 16:00
[16:36] hartmans> no
[16:36] hartmans> So, 4462 doesn't cover the eap exchange that will
still run in the clear (I think)
[16:36] hartmans> taht is, you don't start the encryption until after
kex concludes
[16:36] hartmans> NFS is more serious
[16:44] linus> reading RFC's 7055, 7057, 7029 to get a grip
Thu 30 Jan 2014 17:00
[17:23] hartmans> What can I do to help here?
[17:24] linus> answer questions once i have them will be valuable
[17:24] linus> this field is quite large :)
[17:25] linus> that is, the field of tunnel mitm attacks 
[17:25] linus> it seems reasonable to spend time understanding them
though. do you agree?
[17:33] linus> one thing i'm trying to grasp is how these three
concepts relate to each other: 1) RFC5056 channel binding, 2) RFC6677
channel binding and 3) RFC3748 cryptographic binding
[17:44] hartmans> :-)
[17:44] hartmans> Yeah, that's a bit tricky.
[17:45] hartmans> We *hope* that the explanations in 5056 and the eap
channel binding rfc are good enough.
[17:45] linus> haven't spent enough time with 5056 yet
[17:46] linus> another way for you to help would be to ask me
questions which lead me to read up on and think about things that will
be important in order to be able to come up with a draft of a draft of
how to add ephemeral keying to abfab
[17:47] linus> for attacks, i'm currently staring at RADIUS/RadSec
proxies snarfing the MSK
[17:48] linus> but i've recently started thinking about "false" RP's
[17:51] linus> have almost ignored the SAML layer so far. do you have
pointers to how SAML assertions are given confidentiality and
integrity protection? i found abfab-aaa-saml short on text about keys.
[17:51] linus> maybe they're just supposed to be protected by the EAP
layer?
[17:55] hartmans> no, in general protected only by radsec
[17:55] hartmans> What do you mean false rp
[17:55] hartmans> Also, include passive attacker
[17:56] hartmans> In abfab today a passive attacker gains realm of
home idp, information on credentials used, and potential
fingerprinting you can do from an eap conversation observation
[17:56] hartmans> My biggest question on doing DH is what's a good way
to do it?  Is there some way of describing groups or EC groups and a
way of describing how to validate keys that we can re-use
Thu 30 Jan 2014 18:00
[18:00] linus> false rp: ways for an active attacker to pose as
service provider to client and/or idp
[18:00] linus> describe groups as in describe in a protocol? for
negotiating a session?
[18:02] hartmans> yeah.
[18:12] linus> so you already have a plan for where to do this (as
part of abfab-gss-eap?) and how a new (EC)DHE key will fit in?
[18:12] linus> i'm trying to grasp enough of MSK and EMSK to
understand how it all ties together
[18:13] linus> but maybe i'm on the wrong layer?
[18:49] hartmans> I think you are.
[18:49] hartmans> because if you do it at the MSK layer you don't
protect the eap conversation.
[18:50] hartmans> I was imagining generating something in the initial
message as a session key we use to encrypt all the future context
tokens.
[18:52] linus> ack. initial EAP message, correct?
[18:53] hartmans> no
[18:53] hartmans> before that.
[18:53] > hartmans looks at 7055
[18:54] hartmans> so section 5.4 of 7055
[18:56] linus> excellent, thanks. i've got to run for now. ttyl.
---
*** sam on what -00 needs <2014-02-05 Wed>
- Description of problem:

-- Privacy against passive observers

--- IDP realm almost always exposed

--- fingerprint of EAP implementation

--- certs of IDP realm

-- EAP exposed between the initiator and acceptor

-- MIC, channel bindings and extensions subtokens exposed to passive
   attackers

- Solution: generate a DH key in initial phase; use to encrypt other
  subtokens

- Describe open issues.

I think that's all we need in the 00 draft
*** chat <2014-02-12 Wed>
- RFC 4121 tokens include sequence numbers, as do EAP messages
- temporality [foo] means replay or reordering attacks
- CB == Channel Binding, for EAP it's RFC6677, for non EAP RFC5056
- AVP == Attribute Value Pair (like in RADIUS)
- CB+CB horror -- "It allows you to detect a MITM before the EAP conversation concludes"
[16:39] hartmans> You'd use an EAP CB AVP to communicate whether you
offered a DH key and if a dh key was agreed its hash to the home IDP
[16:39] hartmans> Or rather a RADIUS AVP carried in EAP CB
[16:39] hartmans> Then the acceptor can send the same AVP via radius
[16:39] hartmans> and the IDP can reject if a MITM did unhappy things.
[16:41] hartmans> You probably could not depend on an IDP to reject
because it might not understand your CB AVP or because a proxy between
acceptor and IDP might filter it out, but you could detect more
attacks that way.
[16:43] hartmans> I do like the title "On the use of RFC 6677 channel
bindings to implement the previously unrelated RFC 5056 channel
binding for rfc 7055"
[16:51] hartmans> The cb+cb proposal is not a joke but let's not
include it in the 00
[16:53] hartmans> It allows you to detect a MITM before the EAP
conversation concludes.
[16:53] hartmans> So before any of the leaks of the  extensions phase

[16:52] Josh Howlett> You know, might be worth seeing if we can get
the concept into 00
[16:53] Josh Howlett> I like the fact that the policy can be managed
and enforced by the IdP
[16:54] Josh Howlett> interesting to consider how we want policy on
use of emphemeral keying being managed and enforced by each party
** josh on client and RP sending proofs to IdP
[[gnus:nnimap%2Badbc:INBOX#CF180C59.D947%25josh.howlett@ja.net][Email from Josh Howlett: Re: ABFAB ephemeral keys chat]]:
We could get the initiator and acceptor to send key possession proofs to
the IdP, which could compare these and therefore establish for itself that
both parties are talking to each other. I'm not sure what value this adds,
other than perhaps providing a cryptographically strong accounting
mechanism.
** Step by step, successful authn
- NAI (molgan@example.com): abfab client  ------> RP

** threat analysis based on abfab
- add to section 5 of draft-trammell-perpass-ppa?

*** boilerplate
*** authors
*** abstract
*** TOC (if >15 pages)
*** introduction
ABFAB is a [system] for authenticating users using [federated mumbo
jumbo]. The privacy considerations are naturally potentially numerous
since it's handling users data such as user id (linkable to a person)
and requests for access to various services. Gleaning operative data
from systems built on ABFAB could link a person to one or more IP
addresses and time and date of services s/he wants to access as well
as the response to such requests. Depending on the type of services
requested this so called meta data could potentially map a
significant portion of a persons real life actions and in the long run
habits. This has to be considered highly sensitive information.

Attackers (as defined by RFC6973) can perform one or both of passive
and active attacks. Passive attacks include eavesdropping, i.e. doing
passive wiretapping secretly (RFC4949). Active attacks include sitting
on the network path between initiator and recipient, perhaps acting as
a man-in-the-middle injecting packets in the flow.

Apart from attackers, we have also observers, defined by RFC6973 as an
entity able to observe and collect information from communications and
are distinguished from eavesdroppers by being at lest tacitly
authorised.

This document will consider passive and active attackers as well as
observers but will make distinctions where that makes sense.

*** Terminology
ABFAB is pretty complicated. This is not made easier because it builds
many different systems, many of which have their own terminology for
"client" and "server".

This document will use the term "user" for a human being of flesh and
blood who can be subject of a "privacy intrusion" but occasionally
will also say "user" about an entity not necessarily linked to a
single real name person, like an organisation or a company who's
integrity and privacy might need protection.

A "client", when the term is used [without a qualifier], refers to a
piece of software acting as an ABFAB client, often (always?) on behalf
of a user.

A "server", when the term is used [without a qualifier], refers to a
piece of software acting as an ABFAB server, typically providing a
resource that a user is requesting access to. This is often called
Relying Party (RP) in other documents.

An "IdP" refers to a piece of software providing an identity service,
i.e. a database of user identities and keys/passphrases together with
an interface to ask for acknowledgement of the authenticity of a
given pair.

Eve is an eavesdropper, i.e. a passive attacker listening in. Can't
modify any messages.

Mallory is a malicious man-in-the-middle attacker who can read,
modify and replay messages.

[Oscar?] is a passive observer who should be a good guy based on
administrative arrangements and social contracts but who might leak
data, inadvertently or not.

*** Keys used in [an ABFAB system]
- MSK (EAP)
One MSK (Master Session Key) and one EMSK (Extended MSK) for each EAP
session is derived by the IdP. The MSK [and the EMSK?] is [/are]
shared by [the Client,?] the RP and the IdP. [It/they is/are
transported all over the place, esp. over AAA without end-to-end
confidentiality or integrity]

- AAA-Key (EAP)
The AAA-Key is derived from the MSK/EMSK. They are often equivalent
([[file:~/usr/share/ietf/in-notes/rfc3748.txt::7.10.%20Key%20Derivation][RFC3748 section 7.10]]).
FIXME: case in abfab?

- TSK (EAP)
Transient Session Keys are derived from the AAA-Key. 
Each ciphersuite is specifying how this is done.
FIXME: case in abfab?

- GMSK (GSS)
Derived from the MSK based on the RFC3961 random-to-key operation on
the MSK, using the encryption type of the mechanism in use.

- CRK (GSS-EAP)
Context Root Key, derived from the GMSK (GSS-API MSK), as defined in
[[file:~/usr/share/ietf/in-notes/rfc7055.txt::The%20context%20establishment%20process%20may%20be%20passed%20through%20to%20an%20EAP][RFC7055, section 6]].

This key is treated as sub-session key and ticket session key, in
RFC 4121 terms.
*** Points of attack [attack vectors?] against an ABFAB system
- AAA
  client/NAS = server
  server = IdP
  TODO: don't forget proxies!!!

  [Generally: AAA carries the EAP MSK which is used for securing
  traffic between Client and RP (and more?) -- the MSK (and EMSK?)
  should definitely be derived using DH and is the primary goal for
  the ephemeral keying work]

  - RADIUS
    Eve has the MD5 secret: [TODO]
    Mallory has the MD5 secret: [TODO]
  - RadSec -- RADIUS over TLS
    - (R)PKI / X509
      E/M has the radius server secret key: [TODO]
      E/M has the radius client secret key: [TODO]
    - PSK
      E/M has the pre-shared key: [TODO]
  - Diameter
    [TODO]
- EAP
  peer = client
  authenticator = server
  (back-end) server = IdP
- GSS-API
  initiator = client
  acceptor = server

  [The GSS-EAP negotiation phase is not protected in any way.]
- SAML
  subject = client
  SP = server
  issuer = IdP
- ABFAB

  User and IdP share a long term NAI (f.ex. an e-mail address) and a long
  term key (f.ex. a pass phrase).
*** open questions
- [draft-ietf-abfab-gss-eap-09]: Second, a non-optimal security
  mechanism may be chosen.
  Possible downgrade attack.
*** security considerations
*** iana considerations
*** references, normative and informative
*** author's address
*** IPR disclosure
*** copyright notice
** various text on ephemeral keying
- 2013-11-15 [[gnus:nnimap%2Badbc:ietf.abfab#tsly54pjzeq.fsf@mit.edu][Email from Sam Hartman: {abfab} Right place for ABFAB ]] 
   * Protect the EAP conversation between the peer and NAS (initiator and
   acceptor in GSS terms)
   * Provide a key to protect ABFAB negotiations 
   * Prevent the EAP server or proxies between the EAP server and NAS from
   observing the resulting session

   This would help defeat fingerprinting by passive observers as well as
   minimize the damage that a passive [ob]server could do cooperating with the
   home EAP server.  This is more valuable for ABFAB used in protocols like
   NFS and CIFS or in RFc 4462 SSH key exchange than it is for ABFAB used
   within an TLS session for IMAP, XMPP or SMTP.
  ...
   my conclusion from all this is that the right place to do ephemeral
   keying for an EAP protocol is in the lower layer and that unless I got
   something wrong or missed an alternative, ABFAb should do its own
   mechanism.

I wonder what Sam means that the value of EAP DH keys would be for SSH
kexing -- SSH is already doing DH in RFC 4462. Update: 4462 is not
ABFAB -- we need this too?

RFC 6677 describes "the lying NAS problem". What problem does this
solve? Can we use it?

- [[file:~/usr/share/ietf/internet-drafts/draft-ietf-abfab-arch-10.txt::4.2.%20Privacy%20Aspects%20of%20ABFAB%20Communication%20Flows][file:~/usr/share/ietf/internet-drafts/draft-ietf-abfab-arch-10.txt::4.2. Privacy Aspects of ABFAB Communication Flows]]
   o  The EAP MSK is transported between the IdP and the RP over the AAA
      infrastructure, for example through RADIUS headers.  This is a
      particularly important privacy consideration, as any AAA Proxy
      that has access to the EAP MSK is able to decrypt and eavesdrop on
      any traffic encrypted using that EAP MSK (i.e., all communications
      between the Client and RP).  This problem can be mitigted by the
      application protocol setting up a secure tunnel between the Client
      and the RP and performing a cryptographic binding between the
      tunnel and EAP MSK.

   o  Related to the above, the AAA server has access to the material
      necessary to derive the session key, thus the AAA server can
      observe any traffic encrypted between the Client and RP.  This
      "feature" was" chosen as a simplification and to make performance
      faster; if it was decided that this trade-off was not desirable
      for privacy and security reasons, then extensions to ABFAB that
      make use of techniques such as Diffie-Helman key exchange would
      mitigate against this.

- [[file:~/usr/share/ietf/in-notes/rfc7057.txt::4.%20Security%20Considerations][file:~/usr/share/ietf/in-notes/rfc7057.txt::4. Security Considerations]]
   existing exchange that provides mutual authentication.  In order to
   fully mitigate the risk of NAS impersonation when these mechanisms
   are used, it is RECOMMENDED that mutual channel bindings be used to
   bind the authentications together as described in [RFC7029].  When
*** open questions
- Can radsec proxies see the EAP MSK/EMSK?
  
  A: Yes.
- Can we use something of "this" for signing SAML assertions? The EAP
  MSK/EMSK?
- 7055 "context establishment" and this, how do they relate? 
  
  A: Context establishment is the term for going through the 7055 states.
- They run from GSS initiator to acceptor though, so how do we set up
  keys with the EAP server? pass-through? 
  
  A: Apparently, we don't.
- Will this mess up the [[file:~/usr/share/ietf/in-notes/rfc7055.txt::4.%20Selection%20of%20EAP%20Method][selection of EAP method]]? Depends on wether we
  want to make this optional or not. 

  A: If mandatory there's no difference from before -- we're simply
  using EAP-GSS. If we're adding some fancy negotiation mechanism for
  this, I don't know.
- Can we _remove_ any other crypto now that we have "this"?
- Can we use "this" to authenticate some part(s) too? Where and how?
*** misc notes
- goal 1: provide forward secrecy
  - fixes what problem? 
    - passive attacker records client traffic and learns [long term
      key] later, either through brute force, groundbreaking
      cryptanalysis work, breaking into some of the parties --> 

- goal 2: providing confidentiality for (bc there is none?)
  - client<->RP communication (GSS-API run inside an application
    protocol) during ABFAB (/GSS-API ?) negotiation [because NAI is
    sent in the clear?]

  - RP<->IdP communication (FIXME: is this two separate things -- EAP
    peer<->server and IdP<->RP?)

implemented as a number of context subtokens, 7055 sect. 5?

7055 states:
- initial (vendor, name req+resp)
  - vendor contains debugging info
  - name req+resp carries sensitive acceptor name (like TLS SNI)
- authenticate (eap req+resp) derives MSK/EMSK
  - [what goes here?]
- extensions (flags, gss channel binding, MIC)
  - fixme
** draft-abfab-ephemeral-keying
Early revision history, to be removed:
- -alpha0 2014-02-11 initial draft of a draft
- -alpha1 2014-02-12 adding comments from jabber meeting w/ sam & josh
*** [boilerplate and authors]
*** Abstract
This document describes how EAP-GSS provides forward secrecy by
encrypting each session in an ephemeral key generated in the initial
state of the context establishment. This Diffie-Hellman key is shared
by the initiator (EAP peer) and acceptor (EAP authenticator).

The goal is to stop a passive attacker with access to the traffic
between an ABFAB user and the service she uses (Relying Party), from
getting access to key material and information linkable to the user or
from being able to fingerprint the user.

[do we mitigate any active attacks?]
*** Introduction
*** Problem
**** Privacy against passive observers
***** IDP realm almost always exposed
[FIXME]
***** fingerprint of EAP implementation
[FIXME]
***** certs of IDP realm
[FIXME]
**** EAP exposed between the initiator and acceptor
Access to the MSK gives the possibility to decrypt [and tamper with?]
the traffic protected by the EAP tunnel, i.e. traffic between
initiator and acceptor (the ABFAB Client and the RP). AAA proxies
between RP and IdP have this access and so has anyone eavesdropping on
the path between RP and IdP in case RADIUS/UDP or Diameter is being
used instead of RADIUS/TLS.
**** MIC, channel bindings and extensions subtokens exposed to passive attackers
At the GSS-API layer, the following sensitive data is susceptible for
eavesdropping by a passive attacker:

- Acceptor name

  Carried in name requests and responses during the initial phase.
  
  The acceptor name can be used for fingerprinting users since it
  indicates what service is requested and supplied. In settings where
  the endpoints IP addresses and other identifying information don't
  link the user to the service, exposing the acceptor name is bad for
  privacy.

- Key material

  Carried in EAP requests and responses in the authenticate phase.
  
  [this is where the MSK is derived by the IdP (server) and sent to
  client (initiator/peer) and RP (acceptor/authenticator)]

- GSS channel bindings, in extensions state

  [FIXME]

- MIC, in extensions state

  [FIXME]

- Flags, in extensions state
  
  Currently defined flags leak information about what application
  protocol is being used and pose a threat to user privacy. Future
  flags might increase this threat.

- [FIXME: error subtokens]

*** Solution
Generate a Diffie-Hellman key in the initial state of the context
establishment and use it to encrypt other context tokens. Note that
the DH key, shared by initiator and acceptor, is unique per GSS-API
session, not per context token. [Elaborate on why?]

[describe where in initial the DH key exchange happens and how; point
at general description? copy from existing standard?]

[ describe how we signal algorithm and key size ]

[ describe the use of a nonce/sequence number for temporality, either
in the key or in the payload, covered by the MIC and verified by the
other end -- mitigates replay, reflection and reordering attacks ]

[ describe how we derive a symmetric key from the DH key and encrypt
the context token (perhaps in a GSS "wrap token"?) ]

[ describe how to mix in the DH key with the MSK to form the CRK (7055
sect 6) -- this will make a MITM kexing with both ends unable to
create a MIC which validates properly (and a MITM relaying DH kex will
not know the key and thus not the CRK) ]

*** Costs
- This will cost FIXME extra roundtrips.
- [No new GSS mech. Thus no complexity cost of picking the right one.]
*** Open questions
- Should we make the ephemeral keying and encryption optional?

  Might have to -- asking the list about breaking backward compatibility.
- Bid down attacks -- detect, prevent

  "Interesting" idea from Sam: 6067 CB implementing 5056 CB could
  detect MITM before end of extension state (MIC).
- Include the nonce/sequence number in tokens or fold it into the key?
*** Security considerations
TBD
*** References
**** Normative
3748, 7055, 2743 and draft-ietf-abfab-arch
**** Informative
*** Author's address
Linus Nordberg <linus@nordu.net>
*** IPR disclosure
*** Copyright notice
** comments from jim
Section 2. - I am not sure if you are trying to restrict to the conversation
between the initiator and the acceptor based on the fact that you are
throwing in RADIUS.  There is no RADIUS spoken here.  

 

Section 2.1 - para #2 - The first sentence is just wrong.  No matter what
type of RADIUS you are using, intermediates always have access to the EAP
MSK.  The difference between RADIUS/UDP and RADIUS/TLS or RADIUS/DTLS is the
question of how much passive intermediaries are going to be able to see
based on the use of a long term shared secret.

 

Section 2.2 - Passive observers may also be able to fingerprint the client
based on TLS restart information.

 

Section 2.3 - This should include exposing the realm of the user (or the
full user name in bad implementations).

 

You say

   [ maybe expand on how TEAP [draft-ietf-emu-eap-tunnel-method
<http://tools.ietf.org/html/draft-ietf-emu-eap-tunnel-method> ] could
   solve the problem of AAA proxies learning the MSK, impersonating the
   RP ]

I would be very interested in seeing how you think there could possibly be a
solution in this space.  I can't see one.

 

There probably needs to be a nod to using an application level tunnel as
well.  While I think that it might be nice to have this in the GSS-EAP
layer, we cannot ignore this as an option.

 

Jim
* EAP
- [[file:~/usr/share/ietf/in-notes/rfc3748.txt][rfc3748]] EAP
- [[file:~/usr/share/ietf/in-notes/rfc5247.txt][rfc5247]] EAP key management
- rfc4017 EAP for wifi
- [[file:~/usr/share/ietf/in-notes/rfc4851.txt][rfc4851]] EAP-FAST
- [[file:~/usr/share/ietf/in-notes/rfc6678.txt][rfc6678]] requirements for a tunnel-based EAP method
- [[file:~/usr/share/ietf/in-notes/rfc5077.txt][rfc5077]] TLS session resumption w/o server-side state

Methods like LEAP, EAP-TLS, EAP-TTLS, EAP-PSK, EAP-EKE.
Encapsulations like 802.1X, RADIUS, PPP.

Keys to derive using [DH]:
- MSK?
- EMSK?
* GSS-API and SASL
- [[file:~/usr/share/ietf/in-notes/rfc2743.txt][rfc2743]] GSS-API version 2
- [[file:~/usr/share/ietf/in-notes/rfc4422.txt][rfc4422]] SASL
- [[file:~/usr/share/ietf/in-notes/rfc5056.txt][rfc5056]] (GSS-API) channel binding
- [[file:~/usr/share/ietf/in-notes/rfc5247.txt::Extensible%20Authentication%20Protocol%20(EAP)%20Key%20Management%20Framework][rfc5247]] EAP key management
- [[file:~/usr/share/ietf/in-notes/rfc5801.txt][rfc5801]] GSS-API and SASL: GS2

RFC2743 1.2.2: Per-Message Security Service Availability
RFC2743 1.2.7: Per-Message Protection During Context Establishment

* TLS
[[file:~/usr/share/ietf/in-notes/rfc4279.txt]] PSK
[[file:~/usr/share/ietf/in-notes/rfc5077.txt][rfc5077]] TLS session resumption w/o server-side state
[[file:~/usr/share/ietf/in-notes/rfc5746.txt]] TLS renegotiation indication

* perpass
[[file:~/usr/share/ietf/in-notes/rfc2804.txt]] IETF Policy on Wiretapping
